{"version":3,"sources":["Components/SubComponents/Tabs.js","Components/Header.js","Components/Footer.js","Components/Routes/Portfolio.js","Components/SubComponents/Code.js","CodeSnippets.js","Components/Routes/Blog.js","Components/Routes/About.js","App.js","serviceWorker.js","index.js","Images/man.png","Images/11kyle.github.io_ghibli-react-app_.png","Images/11kyle.github.io_gif-search_.png","Images/11kyle.github.io_react-todo-table_.png"],"names":["CenteredTabs","location","useLocation","React","useState","pathname","value","setValue","Tabs","onChange","event","newValue","aria-label","centered","indicatorColor","Tab","label","component","Link","to","Header","Grid","container","align","item","xs","src","ProfilePicture","alt","width","style","marginTop","Typography","variant","color","useStyles","makeStyles","overrides","margin","fill","Footer","classes","Box","mt","bgcolor","justify","alignItems","height","backgroundColor","href","className","fontSize","theme","root","media","maxWidth","itemOrder1","breakpoints","down","order","itemOrder2","itemOrder3","itemOrder4","itemOrder5","itemOrder6","Portfolio","Fragment","sm","px","PortfolioImage_1","Chip","PortfolioImage_2","PortfolioImage_3","Code","props","language","tomorrow","children","customStyle","codeSnippets","Blog","blogposts","sort","a","b","fristPost","Date","posted","map","blogpost","key","_id","Paper","elevation","p","title","moment","format","gutterBottom","author","body","paragraph","c","d","List","ListItem","ListItemText","primary","up","borderRadius","About","my","secondary","axios","require","createMuiTheme","typography","fontFamily","palette","main","App","getBlogposts","get","then","response","setState","data","loading","catch","error","console","log","state","this","CssBaseline","path","exact","Component","Boolean","window","hostname","match","ReactDOM","render","basename","process","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message","module","exports"],"mappings":"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","file":"static/js/main.82ef0f4b.chunk.js","sourcesContent":["import React from 'react';\r\nimport { \r\n    Tabs,\r\n    Tab\r\n} from '@material-ui/core';\r\nimport { \r\n    Link,\r\n    useLocation \r\n} from 'react-router-dom';\r\n\r\nexport default function CenteredTabs() {\r\n\r\n    let location = useLocation();\r\n    const [value, setValue] = React.useState(location.pathname);\r\n    const handleChange = (event, newValue) => {\r\n        setValue(newValue);\r\n    };\r\n\r\n    return (\r\n        <Tabs \r\n            value={value}\r\n            onChange={handleChange} \r\n            aria-label=\"navigation tabs\"\r\n            centered\r\n            indicatorColor=\"primary\"\r\n        >\r\n            <Tab\r\n                value=\"/\"\r\n                label=\"About\"\r\n                component={Link}\r\n                to=\"/\"\r\n            />\r\n            <Tab\r\n                value=\"/portfolio\"\r\n                label=\"Portfolio\"\r\n                component={Link}\r\n                to=\"/portfolio\"\r\n            />\r\n            <Tab\r\n                value=\"/blog\"\r\n                label=\"Blog\"\r\n                component={Link}\r\n                to=\"/blog\"\r\n            />\r\n        </Tabs>\r\n    );\r\n}","import React, { Fragment } from 'react';\r\nimport Grid from '@material-ui/core/Grid'; \r\nimport ProfilePicture from '../Images/man.png';\r\nimport Tabs from './SubComponents/Tabs';\r\nimport { Typography } from '@material-ui/core';\r\n\r\nexport default function Header() {\r\n    return (\r\n        <Fragment>\r\n            <Grid\r\n                container\r\n                align=\"center\"\r\n            >\r\n                <Grid item xs={12}>\r\n                    <img \r\n                        src={ProfilePicture}\r\n                        alt=\"profile\"\r\n                        width=\"200px\"\r\n                        style={{ marginTop: \"16px\" }}\r\n                    >\r\n                    </img>\r\n                    <Typography variant=\"h2\">\r\n                        Kyle Johnson\r\n                    </Typography>\r\n                    <Typography variant=\"subtitle2\" color=\"primary\">\r\n                        Full-Stack Developer\r\n                    </Typography>\r\n                </Grid>\r\n            </Grid>\r\n            <Tabs />\r\n        </Fragment>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport { \r\n    Grid,\r\n    Link,\r\n    Box,\r\n    makeStyles \r\n} from '@material-ui/core';\r\nimport GitHubIcon from '@material-ui/icons/GitHub';\r\nimport LinkedInIcon from '@material-ui/icons/LinkedIn';\r\nimport PictureAsPdfIcon from '@material-ui/icons/PictureAsPdf';\r\n\r\nconst useStyles = makeStyles({\r\n    overrides: {\r\n        margin: \"16px\",\r\n        fill: \"inherit\",\r\n    },\r\n});\r\n\r\nexport default function Footer() {\r\n\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <Box mt={4} bgcolor=\"primary.main\">\r\n            <Grid\r\n                container\r\n                justify=\"center\"\r\n                alignItems=\"center\"\r\n                style={{height: \"250px\", backgroundColor: \"primary\"}}\r\n            >\r\n                <Link\r\n                    href=\"https://github.com/11kyle\"   \r\n                >\r\n                    <GitHubIcon className={classes.overrides} fontSize=\"large\" />\r\n                </Link>\r\n                <Link\r\n                    href=\"https://www.linkedin.com/in/kylejohnson11/\" \r\n                >\r\n                    <LinkedInIcon className={classes.overrides} fontSize=\"large\" />\r\n                </Link>\r\n                <Link\r\n                    href=\"#\"  \r\n                >\r\n                    <PictureAsPdfIcon className={classes.overrides} fontSize=\"large\" />\r\n                </Link>\r\n            </Grid>\r\n        </Box>\r\n    );\r\n}","import React from 'react';\r\nimport { \r\n    Grid,\r\n    Box,\r\n    makeStyles,\r\n    Typography,\r\n    Chip\r\n} from '@material-ui/core';\r\nimport PortfolioImage_1 from '../../Images/11kyle.github.io_ghibli-react-app_.png';\r\nimport PortfolioImage_2 from '../../Images/11kyle.github.io_gif-search_.png';\r\nimport PortfolioImage_3 from '../../Images/11kyle.github.io_react-todo-table_.png';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        marginTop: \"16px\",\r\n    },\r\n    media: {\r\n        maxWidth: \"100%\",\r\n        height: \"auto\",\r\n    },\r\n    itemOrder1: {\r\n        [theme.breakpoints.down('xs')]: {\r\n            order: \"1\"\r\n        }\r\n    },\r\n    itemOrder2: {\r\n        [theme.breakpoints.down('xs')]: {\r\n            order: \"2\"\r\n        }\r\n    },\r\n    itemOrder3: {\r\n        [theme.breakpoints.down('xs')]: {\r\n            order: \"3\"\r\n        }\r\n    },\r\n    itemOrder4: {\r\n        [theme.breakpoints.down('xs')]: {\r\n            order: \"4\"\r\n        }\r\n    },\r\n    itemOrder5: {\r\n        [theme.breakpoints.down('xs')]: {\r\n            order: \"5\"\r\n        }\r\n    },\r\n    itemOrder6: {\r\n        [theme.breakpoints.down('xs')]: {\r\n            order: \"6\"\r\n        }\r\n    },\r\n}));\r\n\r\nexport default function Portfolio() {\r\n\r\n    const classes = useStyles();\r\n\r\n    return(\r\n        <React.Fragment>\r\n            <Grid item sm={6} className={classes.itemOrder1}>\r\n                <Box mt={4} px={2}>\r\n                    <a href=\"https://11kyle.github.io/ghibli-react-app/\">\r\n                        <img src={PortfolioImage_1} alt=\"A website Kyle built.\" className={classes.media} />  \r\n                    </a>\r\n                </Box>\r\n            </Grid>\r\n            <Grid item sm={6} className={classes.itemOrder2}>\r\n                <Box mt={4} px={2}>\r\n                    <Typography>\r\n                        This project was bootstrapped with Create React App. This project was originally written in vanilla javascript. I replaced the vanilla javascript with React and axios. The css is custom.\r\n                    </Typography>\r\n                    <Chip label=\"React\" variant=\"outlined\" />\r\n                    <Chip label=\"jsx\" variant=\"outlined\" />\r\n                    <Chip label=\"axios\" variant=\"outlined\" />\r\n                </Box>\r\n            </Grid>\r\n\r\n            <Grid item sm={6} className={classes.itemOrder4}>\r\n                <Box mt={4} px={2}>\r\n                    <Typography>\r\n                        This project uses axios to make a get request to the Giphy API. The request contains a query with the default value of 'cats'.\r\n                    </Typography>\r\n                    <Chip label=\"React\" variant=\"outlined\" />\r\n                    <Chip label=\"jsx\" variant=\"outlined\" />\r\n                    <Chip label=\"axios\" variant=\"outlined\" />\r\n                </Box>\r\n            </Grid>\r\n            <Grid item sm={6} className={classes.itemOrder3}>\r\n                <Box mt={4} px={2}>\r\n                    <a href=\"https://11kyle.github.io/gif-search/\">\r\n                        <img src={PortfolioImage_2} alt=\"A website Kyle built.\" className={classes.media} />\r\n                    </a>\r\n                </Box>\r\n            </Grid>\r\n\r\n            <Grid item sm={6} className={classes.itemOrder5}>\r\n                <Box mt={4} px={2}>\r\n                    <a href=\"https://11kyle.github.io/react-todo-table/\">\r\n                        <img src={PortfolioImage_3} alt=\"A website Kyle built.\" className={classes.media} />  \r\n                    </a>\r\n                </Box>\r\n            </Grid>\r\n            <Grid item sm={6} className={classes.itemOrder6}>\r\n                <Box mt={4} px={2}>\r\n                    <Typography>\r\n                        A simple CRUD application written with React.\r\n                    </Typography>\r\n                    <Chip label=\"React\" variant=\"outlined\" />\r\n                    <Chip label=\"jsx\" variant=\"outlined\" />\r\n                </Box>\r\n            </Grid>\r\n\r\n\r\n        </React.Fragment>\r\n    );\r\n}","import React from 'react';\r\nimport { Prism as SyntaxHighlighter} from 'react-syntax-highlighter';\r\nimport { tomorrow } from 'react-syntax-highlighter/dist/esm/styles/prism';\r\n\r\nexport default function Code(props) {\r\n    \r\n    return (\r\n        <SyntaxHighlighter \r\n            language={props.language} \r\n            style={tomorrow}\r\n            children={props.children}\r\n            customStyle={{\"borderRadius\": \"4px\"}}\r\n        >\r\n            \r\n        </SyntaxHighlighter>\r\n    );\r\n}","const codeSnippets = {\r\n    'a': `\"homepage\": \"https://<username>.github.io/<repository_name>\"\r\n\"scripts\": {\r\n    \"predeploy\": \"npm run build\"\r\n    \"deploy\": \"gh-pages -d build\"\r\n    ...\r\n}`,\r\n    'b': `npm install gh-pages --save-dev`,\r\n    'c': `npm run deploy`,\r\n    'd': `// clone a repo \r\ngit clone https://github<username>.github.io/<respoitory_name>\r\n\r\n// push all changes to the repo\r\ngit add .\r\ngit commit -m \"<message>\"\r\ngit push origin <branch>\r\n\r\n// initialize an existing directory\r\ngit init\r\n\r\n// show the status of the git repository\r\ngit status\r\n\r\n// fetch current branch to local project directory\r\ngit pull`\r\n}\r\nexport default codeSnippets;","import React from 'react';\r\nimport { \r\n    Grid,\r\n    Paper,\r\n    Typography,\r\n    Box,\r\n    List,\r\n    ListItem,\r\n    ListItemText\r\n} from '@material-ui/core'; \r\nimport moment from 'moment';\r\nimport Code from '../SubComponents/Code';\r\nimport codeSnippets from '../../CodeSnippets';\r\n\r\nexport default function Blog(props) {    \r\n\r\n    const { blogposts } = props;\r\n\r\n    // Sort blogposts by date posted\r\n    blogposts.sort((a, b) => {\r\n        const fristPost = new Date(a.posted);\r\n        const secondPost = new Date(b.posted);\r\n\r\n        return secondPost - fristPost;\r\n    });\r\n\r\n    // Map blogposts the the DOM\r\n    const listItems = blogposts.map((blogpost) => \r\n        <Grid item xs={12} key={blogpost._id}>\r\n            <Box mt={4}>\r\n                <Paper elevation={2}>\r\n                    <Box p={2}>\r\n                        <Typography variant=\"h4\">\r\n                            {blogpost.title}\r\n                        </Typography>\r\n                        <Typography variant=\"subtitle2\" color=\"primary\">\r\n                            {moment(blogpost.posted).format('dddd MMM D, YYYY')}\r\n                        </Typography>\r\n                        <Typography gutterBottom>\r\n                            Author: {blogpost.author}\r\n                        </Typography>\r\n                        <Typography>\r\n                            {blogpost.body}\r\n                        </Typography>\r\n                    </Box>\r\n                </Paper>\r\n            </Box>\r\n        </Grid>\r\n    );\r\n\r\n    return(\r\n        <React.Fragment>\r\n            <Grid item xs={12}>\r\n                <Box mt={4}>\r\n                    <Paper elevation={2}>\r\n                        <Box p={2}>\r\n                            <Typography variant=\"h4\">\r\n                                How to deploy a create-react-app to gh-pages\r\n                            </Typography>\r\n                            <Typography variant=\"subtitle2\" color=\"primary\">\r\n                                Wednesday Jun 24, 2020\r\n                            </Typography>\r\n                            <Typography paragraph={true}>\r\n                                Author: Kyle Johnson\r\n                            </Typography>\r\n\r\n                            <Typography gutterBottom>\r\n                                The first step is to install gh-pages as a development dependency. Open the command line or terminal and enter the following:\r\n                            </Typography>\r\n\r\n                            {/* Example of a blogpost with syntax highlighting */}\r\n                            <Typography variant=\"caption\">\r\n                                terminal/cmd\r\n                            </Typography>\r\n                            <Code \r\n                                language=\"bash\"\r\n                                children={codeSnippets.b} \r\n                            />\r\n\r\n                            <Typography gutterBottom>\r\n                                Once gh-pages is successfully installed in the project, we need to update the package.json file. Add a name-value pair of homepage with the url of your github repository. Also, add predeploy and deploy scripts to the scripts property:\r\n                            </Typography>\r\n                            <Typography variant=\"caption\">\r\n                                package.json\r\n                            </Typography>\r\n                            <Code \r\n                                language=\"json\"\r\n                                children={codeSnippets.a} \r\n                            />\r\n\r\n                            <Typography gutterBottom>\r\n                                Finally, return to the command line or terminal and run the deploy script:\r\n                            </Typography>\r\n                            <Typography variant=\"caption\">\r\n                                terminal/cmd\r\n                            </Typography>\r\n                            <Code \r\n                                language=\"bash\" \r\n                                children={codeSnippets.c} \r\n                            />\r\n\r\n                        </Box>\r\n                    </Paper>\r\n                </Box>\r\n            </Grid>\r\n\r\n            <Grid item xs={12}>\r\n                <Box mt={4}>\r\n                    <Paper elevation={2}>\r\n                        <Box p={2}>\r\n                            <Typography variant=\"h4\">\r\n                                GitHub Cheatsheet\r\n                            </Typography>\r\n                            <Typography variant=\"subtitle2\" color=\"primary\">\r\n                                Thurs Jun 25, 2020\r\n                            </Typography>\r\n                            <Typography paragraph={true}>\r\n                                Author: Kyle Johnson\r\n                            </Typography>\r\n                            <Typography>\r\n                                \r\n                            </Typography>\r\n                            <Code \r\n                                language=\"bash\"\r\n                                children={codeSnippets.d}\r\n                            />\r\n                        </Box>\r\n                    </Paper>\r\n                </Box>\r\n            </Grid>\r\n\r\n            <Grid item xs={12}>\r\n                <Box mt={4}>\r\n                    <Paper elevation={2}>\r\n                        <Box p={2}>\r\n                            <Typography variant=\"h4\">\r\n                                My favorite Google Fonts\r\n                            </Typography>\r\n                            <Typography variant=\"subtitle2\" color=\"primary\">\r\n                                Thurs Jun 25, 2020\r\n                            </Typography>\r\n                            <Typography paragraph={true}>\r\n                                Author: Kyle Johnson\r\n                            </Typography>\r\n                            <Typography paragraph={true}>\r\n                                It is important to have the right typography for many reasons. Here are some reasons along with some of my favoite Google Fonts.\r\n                            </Typography>\r\n                            <Typography>\r\n                                1. Readability\r\n                            </Typography>\r\n                            <Typography paragraph={true}>\r\n                                They may seem obvious but so many developers choose a font on design over readability. Google Fonts has many fonts the look beautiful in their Handwriting category but these are often hard to read. Chose a font that is clean.\r\n                            </Typography>\r\n                            <Typography>\r\n                                2. Target Audience\r\n                            </Typography>\r\n                            <Typography paragraph={true}>\r\n                                Knowing and understanding the target audience of the website will help determine the font choice. A business website like The New York Times has an older, professional target audience which makes for a more profession looking font. \r\n                                Virgin Airlines is targeting the younger audlt and use a font that is softer and has more spacing between characters and words.\r\n                            </Typography>\r\n                            <Typography>\r\n                                Here are two of my favorite fonts from Google Fonts.\r\n                            </Typography>\r\n                            <List>\r\n                                <ListItem component=\"a\" href=\"https://fonts.google.com/specimen/Quicksand?query=quicksand\">\r\n                                    <ListItemText primary=\"Quicksand\" />\r\n                                </ListItem>\r\n                                <ListItem component=\"a\" href=\"https://fonts.google.com/specimen/Baloo+2?query=baloo\">\r\n                                    <ListItemText primary=\"Baloo 2\" />\r\n                                </ListItem>\r\n                            </List>\r\n                        </Box>\r\n                    </Paper>\r\n                </Box>\r\n            </Grid>\r\n            {/* {listItems}  */}\r\n        </React.Fragment>\r\n    );\r\n}","import React from 'react';\r\nimport {\r\n    Typography,\r\n    Grid,\r\n    Box,\r\n    List,\r\n    ListItem,\r\n    ListItemText,\r\n    Chip,\r\n    makeStyles,\r\n} from '@material-ui/core';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        [theme.breakpoints.up('sm')]: {\r\n            borderRadius: \"10% / 50%\",\r\n        }\r\n    },\r\n}));\r\n\r\nexport default function About() {\r\n\r\n    const classes = useStyles();\r\n\r\n    return(\r\n        <React.Fragment>\r\n            <Grid item sm={12}>\r\n                <Box p={2} my={4} align=\"center\" color=\"white\" bgcolor=\"primary.main\" className={classes.root}>\r\n                    <Typography variant=\"h5\" gutterBottom>Hi, I'm Kyle. Nice to meet you.</Typography>\r\n                    <Typography>Full-stack developer with 5+ years experience in internet technologies and 30+ years experience of being an all-around nice guy. Be sure to check out my portfolio for recent work and my blog for tutorials.</Typography>\r\n                </Box>\r\n            </Grid>\r\n\r\n            <Grid item sm={12}>\r\n                <Box p={2} my={4}>\r\n                    <Typography variant=\"h4\" align=\"center\">Skills</Typography>\r\n                    <Grid container align=\"center\">\r\n                        <Grid item sm={6}>\r\n                            <Typography variant=\"h6\" color=\"primary\">Front-End</Typography>\r\n                            <Chip label=\"HTML5\" variant=\"outlined\" />\r\n                            <Chip label=\"CSS3\" variant=\"outlined\" />\r\n                            <Chip label=\"Javascript\" variant=\"outlined\" />\r\n                            <Chip label=\"React\" variant=\"outlined\" />\r\n                            <Chip label=\"Material-Ui\" variant=\"outlined\" />\r\n                            <Chip label=\"Chrome Dev Tools\" variant=\"outlined\" />\r\n                            <Chip label=\"Bootstrap\" variant=\"outlined\" />\r\n                        </Grid>\r\n                        <Grid item sm={6}>\r\n                            <Typography variant=\"h6\" color=\"primary\">Back-End</Typography>\r\n                            <Chip label=\"Node.js\" variant=\"outlined\" />\r\n                            <Chip label=\"Express.js\" variant=\"outlined\" />\r\n                            <Chip label=\"MongoDB\" variant=\"outlined\" />\r\n                            <Chip label=\"Git & GitHub\" variant=\"outlined\" />\r\n                            <Chip label=\"Cypress.io\" variant=\"outlined\" />\r\n                        </Grid>\r\n                    </Grid>\r\n                </Box>\r\n            </Grid>\r\n\r\n            <Grid item sm={6}>\r\n                <Box p={2} my={4}>\r\n                    <Typography variant=\"h4\" align=\"center\">Education</Typography>\r\n                    <List>\r\n                        <ListItem>\r\n                            <ListItemText primary=\"University of Denver\" secondary=\"Bootcamp Computer Software Engineering\" />\r\n                        </ListItem>\r\n                        <ListItem>\r\n                            <ListItemText primary=\"University of Wisconsin - Stout\" secondary=\"BS Mechanical Engineering\" />\r\n                        </ListItem>\r\n                    </List>\r\n                </Box>\r\n            </Grid>        \r\n        </React.Fragment>\r\n    );\r\n}","import React, { Component } from 'react';\nimport { \n    Switch,\n    Route,\n} from 'react-router-dom';\nimport Header from './Components/Header';\nimport Footer from './Components/Footer';\nimport Portfolio from './Components/Routes/Portfolio';\nimport Blog from './Components/Routes/Blog';\nimport About from './Components/Routes/About';\nimport { \n    MuiThemeProvider,\n    createMuiTheme,\n    CssBaseline,\n    Grid\n} from '@material-ui/core';\n\nconst axios = require('axios');\n\nconst theme = createMuiTheme({\n    typography: { \n        fontFamily: 'Quicksand, sans-serif'\n    },\n    palette: {\n        primary: {\n            main: '#EB6D4A'\n        }\n    }\n});\n\nexport default class App extends Component {\n\n    constructor(props) {\n        super();\n        this.state = {\n            blogposts: [],\n            loading: true,\n        };\n    }\n\n    componentDidMount() {\n        this.getBlogposts();\n    }\n\n    getBlogposts = () => {\n        axios.get('https://cors-anywhere.herokuapp.com/https://kj-portfolio.herokuapp.com/api/blogpost')\n            .then(response => {\n                this.setState({\n                blogposts: response.data,\n                loading: false,\n            });\n        })\n        .catch(error => {\n            console.log(`Error fetching and parsing data`, error);\n        });\n    }\n\n    render() {\n        return(\n            <MuiThemeProvider theme={theme}>\n                <CssBaseline>\n                    <Header />\n                    <Grid\n                        container\n                        justify=\"center\"\n                        style={{maxWidth: \"800px\", margin: \"0 auto\"}}\n                    >\n                        <Switch>\n                            <Route path='/portfolio'>\n                                <Portfolio />\n                            </Route>\n                            <Route path='/blog'>\n                                {\n                                    (this.state.loading)\n                                    ?<p>Loading...</p>\n                                    : <Blog blogposts={this.state.blogposts} />\n                                }\n                            </Route>\n                            <Route  exact path='/'>\n                                <About />\n                            </Route>\n                        </Switch>\n                    </Grid>\n                    <Footer />\n                </CssBaseline>\n            </MuiThemeProvider>\n        );\n    }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { HashRouter } from 'react-router-dom';\n\nReactDOM.render(\n  <HashRouter basename={process.env.PUBLIC_URL}>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </HashRouter>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/man.9152be17.png\";","module.exports = __webpack_public_path__ + \"static/media/11kyle.github.io_ghibli-react-app_.2bc154d0.png\";","module.exports = __webpack_public_path__ + \"static/media/11kyle.github.io_gif-search_.765ebfbf.png\";","module.exports = __webpack_public_path__ + \"static/media/11kyle.github.io_react-todo-table_.2e8b7e79.png\";"],"sourceRoot":""}